import functools
import uuid
from pathlib import Path
from typing import Dict, Any
from datetime import datetime, timedelta

import boto3
import requests
import rsa
from botocore.config import Config
from botocore.signers import CloudFrontSigner
from django.conf import settings

from fms.my_keys import CLOUDFRONT_KEY_ID

BASE_DIR = Path(__file__).resolve().parent.parent

FILE_TYPES = {
    'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
}


def boto_test():
    # s3 = boto3.client('s3', settings.AWS_DEFAULT_REGION,
    #                   aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
    #                   aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
    #                   config=Config(signature_version='s3v4'))
    # response = s3.list_buckets()
    privkey_path = BASE_DIR / 'fms' / 'fms-private-cf.pem'
    key_id = ' '
    print(str(privkey_path))
    cfUtil = CloudFrontUtil(private_key_path=str(privkey_path), key_id=key_id)
    base_url = 'https://fms-cdn-secure.dev.yashkulshreshtha.me/'
    file_url = base_url + 'private/media/7-web-2922ba77f03542aabc17a53f4293931a.pdf'
    expire_at = datetime.now() + timedelta(minutes=10)
    obj_key = 'private/media/7-web-2922ba77f03542aabc17a53f4293931a.pdf'
    signed_cookies = cfUtil.generate_signed_cookies(file_url, expire_at)
    r = requests.get(file_url, cookies=signed_cookies)
    # print(response)
    print(f'using signed cookie: {r.status_code}, {r.content}')


def get_file_upload_url(file_object):
    s3 = boto3.client('s3', settings.AWS_DEFAULT_REGION,
                      aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
                      aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
                      config=Config(signature_version='s3v4'))
    generated_resp = s3.generate_presigned_post(
        Bucket=settings.AWS_STORAGE_BUCKET_NAME,
        Key=file_object['filename'],
        Fields={
            'acl':'private',
            'Content-Type': FILE_TYPES[file_object['ext']],
            'Content-Length': file_object['filesize']
        },
        Conditions=[
            {'acl':'private'},
            {'Content-Type':FILE_TYPES[file_object['ext']]},
            {'Content-Length':file_object['filesize']}
        ]
    )
    return generated_resp


class CloudFrontUtil:
    def __init__(self, private_key_path: str, key_id: str):
        """
        :param private_key_path: str, the path of private key which generated by openssl command line
        :param key_id: str, CloudFront -> Key management -> Public keys
        """
        self.key_id = key_id

        with open(private_key_path, 'rb') as fp:
            priv_key = rsa.PrivateKey.load_pkcs1(fp.read())

        # NOTE: CloudFront use RSA-SHA1 for signing URLs or cookies
        self.rsa_signer = functools.partial(
            rsa.sign, priv_key=priv_key, hash_method='SHA-1'
        )
        self.cf_signer = CloudFrontSigner(key_id, self.rsa_signer)

    def generate_presigned_url(self, url: str, expire_at: datetime) -> str:
        # Create a signed url that will be valid until the specfic expiry date
        # provided using a canned policy.
        return self.cf_signer.generate_presigned_url(url, date_less_than=expire_at)

    def generate_signed_cookies(self, url: str, expire_at: datetime):
        policy = self.cf_signer.build_policy(url, expire_at).encode('utf8')
        policy_64 = self.cf_signer._url_b64encode(policy).decode('utf8')

        signature = self.rsa_signer(policy)
        signature_64 = self.cf_signer._url_b64encode(signature).decode('utf8')
        return {
            "CloudFront-Policy": policy_64,
            "CloudFront-Signature": signature_64,
            "CloudFront-Key-Pair-Id": self.key_id,
        }


def get_cloudfront_signed_cookies(file_path):
    privkey_path = BASE_DIR / 'fms' / 'fms-private-cf.pem'
    key_id = CLOUDFRONT_KEY_ID
    cfUtil = CloudFrontUtil(private_key_path=str(privkey_path), key_id=key_id)
    base_url = 'https://fms-cdn-secure.dev.yashkulshreshtha.me/'
    file_url = base_url + file_path
    expire_at = datetime.now() + timedelta(minutes=10)
    signed_cookies = cfUtil.generate_signed_cookies(file_url, expire_at)
    return signed_cookies, file_url

